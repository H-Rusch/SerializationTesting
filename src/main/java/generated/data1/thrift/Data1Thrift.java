/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package generated.data1.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2022-07-20")
public class Data1Thrift implements org.apache.thrift.TBase<Data1Thrift, Data1Thrift._Fields>, java.io.Serializable, Cloneable, Comparable<Data1Thrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Data1Thrift");

  private static final org.apache.thrift.protocol.TField STRING1_FIELD_DESC = new org.apache.thrift.protocol.TField("string1", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField STRING2_FIELD_DESC = new org.apache.thrift.protocol.TField("string2", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField NUMBER1_FIELD_DESC = new org.apache.thrift.protocol.TField("number1", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NUMBER2_FIELD_DESC = new org.apache.thrift.protocol.TField("number2", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField NUMBER3_FIELD_DESC = new org.apache.thrift.protocol.TField("number3", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField NUMBER4_FIELD_DESC = new org.apache.thrift.protocol.TField("number4", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField NUMBER5_FIELD_DESC = new org.apache.thrift.protocol.TField("number5", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField NUMBER6_FIELD_DESC = new org.apache.thrift.protocol.TField("number6", org.apache.thrift.protocol.TType.DOUBLE, (short)8);
  private static final org.apache.thrift.protocol.TField NUMBER7_FIELD_DESC = new org.apache.thrift.protocol.TField("number7", org.apache.thrift.protocol.TType.DOUBLE, (short)9);
  private static final org.apache.thrift.protocol.TField NUMBER8_FIELD_DESC = new org.apache.thrift.protocol.TField("number8", org.apache.thrift.protocol.TType.DOUBLE, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Data1ThriftStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Data1ThriftTupleSchemeFactory();

  public @org.apache.thrift.annotation.Nullable java.lang.String string1; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String string2; // required
  public int number1; // required
  public int number2; // required
  public int number3; // required
  public int number4; // required
  public double number5; // required
  public double number6; // required
  public double number7; // required
  public double number8; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STRING1((short)1, "string1"),
    STRING2((short)2, "string2"),
    NUMBER1((short)3, "number1"),
    NUMBER2((short)4, "number2"),
    NUMBER3((short)5, "number3"),
    NUMBER4((short)6, "number4"),
    NUMBER5((short)7, "number5"),
    NUMBER6((short)8, "number6"),
    NUMBER7((short)9, "number7"),
    NUMBER8((short)10, "number8");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STRING1
          return STRING1;
        case 2: // STRING2
          return STRING2;
        case 3: // NUMBER1
          return NUMBER1;
        case 4: // NUMBER2
          return NUMBER2;
        case 5: // NUMBER3
          return NUMBER3;
        case 6: // NUMBER4
          return NUMBER4;
        case 7: // NUMBER5
          return NUMBER5;
        case 8: // NUMBER6
          return NUMBER6;
        case 9: // NUMBER7
          return NUMBER7;
        case 10: // NUMBER8
          return NUMBER8;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMBER1_ISSET_ID = 0;
  private static final int __NUMBER2_ISSET_ID = 1;
  private static final int __NUMBER3_ISSET_ID = 2;
  private static final int __NUMBER4_ISSET_ID = 3;
  private static final int __NUMBER5_ISSET_ID = 4;
  private static final int __NUMBER6_ISSET_ID = 5;
  private static final int __NUMBER7_ISSET_ID = 6;
  private static final int __NUMBER8_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STRING1, new org.apache.thrift.meta_data.FieldMetaData("string1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STRING2, new org.apache.thrift.meta_data.FieldMetaData("string2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NUMBER1, new org.apache.thrift.meta_data.FieldMetaData("number1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUMBER2, new org.apache.thrift.meta_data.FieldMetaData("number2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUMBER3, new org.apache.thrift.meta_data.FieldMetaData("number3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUMBER4, new org.apache.thrift.meta_data.FieldMetaData("number4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUMBER5, new org.apache.thrift.meta_data.FieldMetaData("number5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NUMBER6, new org.apache.thrift.meta_data.FieldMetaData("number6", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NUMBER7, new org.apache.thrift.meta_data.FieldMetaData("number7", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NUMBER8, new org.apache.thrift.meta_data.FieldMetaData("number8", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Data1Thrift.class, metaDataMap);
  }

  public Data1Thrift() {
  }

  public Data1Thrift(
    java.lang.String string1,
    java.lang.String string2,
    int number1,
    int number2,
    int number3,
    int number4,
    double number5,
    double number6,
    double number7,
    double number8)
  {
    this();
    this.string1 = string1;
    this.string2 = string2;
    this.number1 = number1;
    setNumber1IsSet(true);
    this.number2 = number2;
    setNumber2IsSet(true);
    this.number3 = number3;
    setNumber3IsSet(true);
    this.number4 = number4;
    setNumber4IsSet(true);
    this.number5 = number5;
    setNumber5IsSet(true);
    this.number6 = number6;
    setNumber6IsSet(true);
    this.number7 = number7;
    setNumber7IsSet(true);
    this.number8 = number8;
    setNumber8IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Data1Thrift(Data1Thrift other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetString1()) {
      this.string1 = other.string1;
    }
    if (other.isSetString2()) {
      this.string2 = other.string2;
    }
    this.number1 = other.number1;
    this.number2 = other.number2;
    this.number3 = other.number3;
    this.number4 = other.number4;
    this.number5 = other.number5;
    this.number6 = other.number6;
    this.number7 = other.number7;
    this.number8 = other.number8;
  }

  public Data1Thrift deepCopy() {
    return new Data1Thrift(this);
  }

  @Override
  public void clear() {
    this.string1 = null;
    this.string2 = null;
    setNumber1IsSet(false);
    this.number1 = 0;
    setNumber2IsSet(false);
    this.number2 = 0;
    setNumber3IsSet(false);
    this.number3 = 0;
    setNumber4IsSet(false);
    this.number4 = 0;
    setNumber5IsSet(false);
    this.number5 = 0.0;
    setNumber6IsSet(false);
    this.number6 = 0.0;
    setNumber7IsSet(false);
    this.number7 = 0.0;
    setNumber8IsSet(false);
    this.number8 = 0.0;
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getString1() {
    return this.string1;
  }

  public Data1Thrift setString1(@org.apache.thrift.annotation.Nullable java.lang.String string1) {
    this.string1 = string1;
    return this;
  }

  public void unsetString1() {
    this.string1 = null;
  }

  /** Returns true if field string1 is set (has been assigned a value) and false otherwise */
  public boolean isSetString1() {
    return this.string1 != null;
  }

  public void setString1IsSet(boolean value) {
    if (!value) {
      this.string1 = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getString2() {
    return this.string2;
  }

  public Data1Thrift setString2(@org.apache.thrift.annotation.Nullable java.lang.String string2) {
    this.string2 = string2;
    return this;
  }

  public void unsetString2() {
    this.string2 = null;
  }

  /** Returns true if field string2 is set (has been assigned a value) and false otherwise */
  public boolean isSetString2() {
    return this.string2 != null;
  }

  public void setString2IsSet(boolean value) {
    if (!value) {
      this.string2 = null;
    }
  }

  public int getNumber1() {
    return this.number1;
  }

  public Data1Thrift setNumber1(int number1) {
    this.number1 = number1;
    setNumber1IsSet(true);
    return this;
  }

  public void unsetNumber1() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBER1_ISSET_ID);
  }

  /** Returns true if field number1 is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber1() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBER1_ISSET_ID);
  }

  public void setNumber1IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBER1_ISSET_ID, value);
  }

  public int getNumber2() {
    return this.number2;
  }

  public Data1Thrift setNumber2(int number2) {
    this.number2 = number2;
    setNumber2IsSet(true);
    return this;
  }

  public void unsetNumber2() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBER2_ISSET_ID);
  }

  /** Returns true if field number2 is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber2() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBER2_ISSET_ID);
  }

  public void setNumber2IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBER2_ISSET_ID, value);
  }

  public int getNumber3() {
    return this.number3;
  }

  public Data1Thrift setNumber3(int number3) {
    this.number3 = number3;
    setNumber3IsSet(true);
    return this;
  }

  public void unsetNumber3() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBER3_ISSET_ID);
  }

  /** Returns true if field number3 is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber3() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBER3_ISSET_ID);
  }

  public void setNumber3IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBER3_ISSET_ID, value);
  }

  public int getNumber4() {
    return this.number4;
  }

  public Data1Thrift setNumber4(int number4) {
    this.number4 = number4;
    setNumber4IsSet(true);
    return this;
  }

  public void unsetNumber4() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBER4_ISSET_ID);
  }

  /** Returns true if field number4 is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber4() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBER4_ISSET_ID);
  }

  public void setNumber4IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBER4_ISSET_ID, value);
  }

  public double getNumber5() {
    return this.number5;
  }

  public Data1Thrift setNumber5(double number5) {
    this.number5 = number5;
    setNumber5IsSet(true);
    return this;
  }

  public void unsetNumber5() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBER5_ISSET_ID);
  }

  /** Returns true if field number5 is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber5() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBER5_ISSET_ID);
  }

  public void setNumber5IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBER5_ISSET_ID, value);
  }

  public double getNumber6() {
    return this.number6;
  }

  public Data1Thrift setNumber6(double number6) {
    this.number6 = number6;
    setNumber6IsSet(true);
    return this;
  }

  public void unsetNumber6() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBER6_ISSET_ID);
  }

  /** Returns true if field number6 is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber6() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBER6_ISSET_ID);
  }

  public void setNumber6IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBER6_ISSET_ID, value);
  }

  public double getNumber7() {
    return this.number7;
  }

  public Data1Thrift setNumber7(double number7) {
    this.number7 = number7;
    setNumber7IsSet(true);
    return this;
  }

  public void unsetNumber7() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBER7_ISSET_ID);
  }

  /** Returns true if field number7 is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber7() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBER7_ISSET_ID);
  }

  public void setNumber7IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBER7_ISSET_ID, value);
  }

  public double getNumber8() {
    return this.number8;
  }

  public Data1Thrift setNumber8(double number8) {
    this.number8 = number8;
    setNumber8IsSet(true);
    return this;
  }

  public void unsetNumber8() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBER8_ISSET_ID);
  }

  /** Returns true if field number8 is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber8() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBER8_ISSET_ID);
  }

  public void setNumber8IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBER8_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case STRING1:
      if (value == null) {
        unsetString1();
      } else {
        setString1((java.lang.String)value);
      }
      break;

    case STRING2:
      if (value == null) {
        unsetString2();
      } else {
        setString2((java.lang.String)value);
      }
      break;

    case NUMBER1:
      if (value == null) {
        unsetNumber1();
      } else {
        setNumber1((java.lang.Integer)value);
      }
      break;

    case NUMBER2:
      if (value == null) {
        unsetNumber2();
      } else {
        setNumber2((java.lang.Integer)value);
      }
      break;

    case NUMBER3:
      if (value == null) {
        unsetNumber3();
      } else {
        setNumber3((java.lang.Integer)value);
      }
      break;

    case NUMBER4:
      if (value == null) {
        unsetNumber4();
      } else {
        setNumber4((java.lang.Integer)value);
      }
      break;

    case NUMBER5:
      if (value == null) {
        unsetNumber5();
      } else {
        setNumber5((java.lang.Double)value);
      }
      break;

    case NUMBER6:
      if (value == null) {
        unsetNumber6();
      } else {
        setNumber6((java.lang.Double)value);
      }
      break;

    case NUMBER7:
      if (value == null) {
        unsetNumber7();
      } else {
        setNumber7((java.lang.Double)value);
      }
      break;

    case NUMBER8:
      if (value == null) {
        unsetNumber8();
      } else {
        setNumber8((java.lang.Double)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case STRING1:
      return getString1();

    case STRING2:
      return getString2();

    case NUMBER1:
      return getNumber1();

    case NUMBER2:
      return getNumber2();

    case NUMBER3:
      return getNumber3();

    case NUMBER4:
      return getNumber4();

    case NUMBER5:
      return getNumber5();

    case NUMBER6:
      return getNumber6();

    case NUMBER7:
      return getNumber7();

    case NUMBER8:
      return getNumber8();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case STRING1:
      return isSetString1();
    case STRING2:
      return isSetString2();
    case NUMBER1:
      return isSetNumber1();
    case NUMBER2:
      return isSetNumber2();
    case NUMBER3:
      return isSetNumber3();
    case NUMBER4:
      return isSetNumber4();
    case NUMBER5:
      return isSetNumber5();
    case NUMBER6:
      return isSetNumber6();
    case NUMBER7:
      return isSetNumber7();
    case NUMBER8:
      return isSetNumber8();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof Data1Thrift)
      return this.equals((Data1Thrift)that);
    return false;
  }

  public boolean equals(Data1Thrift that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_string1 = true && this.isSetString1();
    boolean that_present_string1 = true && that.isSetString1();
    if (this_present_string1 || that_present_string1) {
      if (!(this_present_string1 && that_present_string1))
        return false;
      if (!this.string1.equals(that.string1))
        return false;
    }

    boolean this_present_string2 = true && this.isSetString2();
    boolean that_present_string2 = true && that.isSetString2();
    if (this_present_string2 || that_present_string2) {
      if (!(this_present_string2 && that_present_string2))
        return false;
      if (!this.string2.equals(that.string2))
        return false;
    }

    boolean this_present_number1 = true;
    boolean that_present_number1 = true;
    if (this_present_number1 || that_present_number1) {
      if (!(this_present_number1 && that_present_number1))
        return false;
      if (this.number1 != that.number1)
        return false;
    }

    boolean this_present_number2 = true;
    boolean that_present_number2 = true;
    if (this_present_number2 || that_present_number2) {
      if (!(this_present_number2 && that_present_number2))
        return false;
      if (this.number2 != that.number2)
        return false;
    }

    boolean this_present_number3 = true;
    boolean that_present_number3 = true;
    if (this_present_number3 || that_present_number3) {
      if (!(this_present_number3 && that_present_number3))
        return false;
      if (this.number3 != that.number3)
        return false;
    }

    boolean this_present_number4 = true;
    boolean that_present_number4 = true;
    if (this_present_number4 || that_present_number4) {
      if (!(this_present_number4 && that_present_number4))
        return false;
      if (this.number4 != that.number4)
        return false;
    }

    boolean this_present_number5 = true;
    boolean that_present_number5 = true;
    if (this_present_number5 || that_present_number5) {
      if (!(this_present_number5 && that_present_number5))
        return false;
      if (this.number5 != that.number5)
        return false;
    }

    boolean this_present_number6 = true;
    boolean that_present_number6 = true;
    if (this_present_number6 || that_present_number6) {
      if (!(this_present_number6 && that_present_number6))
        return false;
      if (this.number6 != that.number6)
        return false;
    }

    boolean this_present_number7 = true;
    boolean that_present_number7 = true;
    if (this_present_number7 || that_present_number7) {
      if (!(this_present_number7 && that_present_number7))
        return false;
      if (this.number7 != that.number7)
        return false;
    }

    boolean this_present_number8 = true;
    boolean that_present_number8 = true;
    if (this_present_number8 || that_present_number8) {
      if (!(this_present_number8 && that_present_number8))
        return false;
      if (this.number8 != that.number8)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetString1()) ? 131071 : 524287);
    if (isSetString1())
      hashCode = hashCode * 8191 + string1.hashCode();

    hashCode = hashCode * 8191 + ((isSetString2()) ? 131071 : 524287);
    if (isSetString2())
      hashCode = hashCode * 8191 + string2.hashCode();

    hashCode = hashCode * 8191 + number1;

    hashCode = hashCode * 8191 + number2;

    hashCode = hashCode * 8191 + number3;

    hashCode = hashCode * 8191 + number4;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(number5);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(number6);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(number7);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(number8);

    return hashCode;
  }

  @Override
  public int compareTo(Data1Thrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetString1(), other.isSetString1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetString1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.string1, other.string1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetString2(), other.isSetString2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetString2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.string2, other.string2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumber1(), other.isSetNumber1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number1, other.number1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumber2(), other.isSetNumber2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number2, other.number2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumber3(), other.isSetNumber3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number3, other.number3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumber4(), other.isSetNumber4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number4, other.number4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumber5(), other.isSetNumber5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number5, other.number5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumber6(), other.isSetNumber6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number6, other.number6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumber7(), other.isSetNumber7());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber7()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number7, other.number7);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumber8(), other.isSetNumber8());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber8()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number8, other.number8);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Data1Thrift(");
    boolean first = true;

    sb.append("string1:");
    if (this.string1 == null) {
      sb.append("null");
    } else {
      sb.append(this.string1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("string2:");
    if (this.string2 == null) {
      sb.append("null");
    } else {
      sb.append(this.string2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("number1:");
    sb.append(this.number1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number2:");
    sb.append(this.number2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number3:");
    sb.append(this.number3);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number4:");
    sb.append(this.number4);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number5:");
    sb.append(this.number5);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number6:");
    sb.append(this.number6);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number7:");
    sb.append(this.number7);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number8:");
    sb.append(this.number8);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class Data1ThriftStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public Data1ThriftStandardScheme getScheme() {
      return new Data1ThriftStandardScheme();
    }
  }

  private static class Data1ThriftStandardScheme extends org.apache.thrift.scheme.StandardScheme<Data1Thrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Data1Thrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STRING1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.string1 = iprot.readString();
              struct.setString1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STRING2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.string2 = iprot.readString();
              struct.setString2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUMBER1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.number1 = iprot.readI32();
              struct.setNumber1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NUMBER2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.number2 = iprot.readI32();
              struct.setNumber2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NUMBER3
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.number3 = iprot.readI32();
              struct.setNumber3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NUMBER4
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.number4 = iprot.readI32();
              struct.setNumber4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NUMBER5
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.number5 = iprot.readDouble();
              struct.setNumber5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NUMBER6
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.number6 = iprot.readDouble();
              struct.setNumber6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // NUMBER7
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.number7 = iprot.readDouble();
              struct.setNumber7IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NUMBER8
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.number8 = iprot.readDouble();
              struct.setNumber8IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Data1Thrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.string1 != null) {
        oprot.writeFieldBegin(STRING1_FIELD_DESC);
        oprot.writeString(struct.string1);
        oprot.writeFieldEnd();
      }
      if (struct.string2 != null) {
        oprot.writeFieldBegin(STRING2_FIELD_DESC);
        oprot.writeString(struct.string2);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NUMBER1_FIELD_DESC);
      oprot.writeI32(struct.number1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER2_FIELD_DESC);
      oprot.writeI32(struct.number2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER3_FIELD_DESC);
      oprot.writeI32(struct.number3);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER4_FIELD_DESC);
      oprot.writeI32(struct.number4);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER5_FIELD_DESC);
      oprot.writeDouble(struct.number5);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER6_FIELD_DESC);
      oprot.writeDouble(struct.number6);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER7_FIELD_DESC);
      oprot.writeDouble(struct.number7);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER8_FIELD_DESC);
      oprot.writeDouble(struct.number8);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class Data1ThriftTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public Data1ThriftTupleScheme getScheme() {
      return new Data1ThriftTupleScheme();
    }
  }

  private static class Data1ThriftTupleScheme extends org.apache.thrift.scheme.TupleScheme<Data1Thrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Data1Thrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetString1()) {
        optionals.set(0);
      }
      if (struct.isSetString2()) {
        optionals.set(1);
      }
      if (struct.isSetNumber1()) {
        optionals.set(2);
      }
      if (struct.isSetNumber2()) {
        optionals.set(3);
      }
      if (struct.isSetNumber3()) {
        optionals.set(4);
      }
      if (struct.isSetNumber4()) {
        optionals.set(5);
      }
      if (struct.isSetNumber5()) {
        optionals.set(6);
      }
      if (struct.isSetNumber6()) {
        optionals.set(7);
      }
      if (struct.isSetNumber7()) {
        optionals.set(8);
      }
      if (struct.isSetNumber8()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetString1()) {
        oprot.writeString(struct.string1);
      }
      if (struct.isSetString2()) {
        oprot.writeString(struct.string2);
      }
      if (struct.isSetNumber1()) {
        oprot.writeI32(struct.number1);
      }
      if (struct.isSetNumber2()) {
        oprot.writeI32(struct.number2);
      }
      if (struct.isSetNumber3()) {
        oprot.writeI32(struct.number3);
      }
      if (struct.isSetNumber4()) {
        oprot.writeI32(struct.number4);
      }
      if (struct.isSetNumber5()) {
        oprot.writeDouble(struct.number5);
      }
      if (struct.isSetNumber6()) {
        oprot.writeDouble(struct.number6);
      }
      if (struct.isSetNumber7()) {
        oprot.writeDouble(struct.number7);
      }
      if (struct.isSetNumber8()) {
        oprot.writeDouble(struct.number8);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Data1Thrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.string1 = iprot.readString();
        struct.setString1IsSet(true);
      }
      if (incoming.get(1)) {
        struct.string2 = iprot.readString();
        struct.setString2IsSet(true);
      }
      if (incoming.get(2)) {
        struct.number1 = iprot.readI32();
        struct.setNumber1IsSet(true);
      }
      if (incoming.get(3)) {
        struct.number2 = iprot.readI32();
        struct.setNumber2IsSet(true);
      }
      if (incoming.get(4)) {
        struct.number3 = iprot.readI32();
        struct.setNumber3IsSet(true);
      }
      if (incoming.get(5)) {
        struct.number4 = iprot.readI32();
        struct.setNumber4IsSet(true);
      }
      if (incoming.get(6)) {
        struct.number5 = iprot.readDouble();
        struct.setNumber5IsSet(true);
      }
      if (incoming.get(7)) {
        struct.number6 = iprot.readDouble();
        struct.setNumber6IsSet(true);
      }
      if (incoming.get(8)) {
        struct.number7 = iprot.readDouble();
        struct.setNumber7IsSet(true);
      }
      if (incoming.get(9)) {
        struct.number8 = iprot.readDouble();
        struct.setNumber8IsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

