/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package generated.data3.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2022-07-20")
public class Data3Thrift implements org.apache.thrift.TBase<Data3Thrift, Data3Thrift._Fields>, java.io.Serializable, Cloneable, Comparable<Data3Thrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Data3Thrift");

  private static final org.apache.thrift.protocol.TField NUMBER1_FIELD_DESC = new org.apache.thrift.protocol.TField("number1", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField NUMBER2_FIELD_DESC = new org.apache.thrift.protocol.TField("number2", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField NUMBER3_FIELD_DESC = new org.apache.thrift.protocol.TField("number3", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField NUMBER4_FIELD_DESC = new org.apache.thrift.protocol.TField("number4", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField NUMBER5_FIELD_DESC = new org.apache.thrift.protocol.TField("number5", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField NUMBER6_FIELD_DESC = new org.apache.thrift.protocol.TField("number6", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField NUMBER7_FIELD_DESC = new org.apache.thrift.protocol.TField("number7", org.apache.thrift.protocol.TType.I32, (short)7);
  private static final org.apache.thrift.protocol.TField NUMBER8_FIELD_DESC = new org.apache.thrift.protocol.TField("number8", org.apache.thrift.protocol.TType.I32, (short)8);
  private static final org.apache.thrift.protocol.TField NUMBER9_FIELD_DESC = new org.apache.thrift.protocol.TField("number9", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField NUMBER10_FIELD_DESC = new org.apache.thrift.protocol.TField("number10", org.apache.thrift.protocol.TType.I32, (short)10);
  private static final org.apache.thrift.protocol.TField NUMBER11_FIELD_DESC = new org.apache.thrift.protocol.TField("number11", org.apache.thrift.protocol.TType.DOUBLE, (short)11);
  private static final org.apache.thrift.protocol.TField NUMBER12_FIELD_DESC = new org.apache.thrift.protocol.TField("number12", org.apache.thrift.protocol.TType.DOUBLE, (short)12);
  private static final org.apache.thrift.protocol.TField NUMBER13_FIELD_DESC = new org.apache.thrift.protocol.TField("number13", org.apache.thrift.protocol.TType.DOUBLE, (short)13);
  private static final org.apache.thrift.protocol.TField NUMBER14_FIELD_DESC = new org.apache.thrift.protocol.TField("number14", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField NUMBER15_FIELD_DESC = new org.apache.thrift.protocol.TField("number15", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField NUMBER16_FIELD_DESC = new org.apache.thrift.protocol.TField("number16", org.apache.thrift.protocol.TType.DOUBLE, (short)16);
  private static final org.apache.thrift.protocol.TField NUMBER17_FIELD_DESC = new org.apache.thrift.protocol.TField("number17", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField NUMBER18_FIELD_DESC = new org.apache.thrift.protocol.TField("number18", org.apache.thrift.protocol.TType.DOUBLE, (short)18);
  private static final org.apache.thrift.protocol.TField NUMBER19_FIELD_DESC = new org.apache.thrift.protocol.TField("number19", org.apache.thrift.protocol.TType.DOUBLE, (short)19);
  private static final org.apache.thrift.protocol.TField NUMBER20_FIELD_DESC = new org.apache.thrift.protocol.TField("number20", org.apache.thrift.protocol.TType.DOUBLE, (short)20);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Data3ThriftStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Data3ThriftTupleSchemeFactory();

  public int number1; // required
  public int number2; // required
  public int number3; // required
  public int number4; // required
  public int number5; // required
  public int number6; // required
  public int number7; // required
  public int number8; // required
  public int number9; // required
  public int number10; // required
  public double number11; // required
  public double number12; // required
  public double number13; // required
  public double number14; // required
  public double number15; // required
  public double number16; // required
  public double number17; // required
  public double number18; // required
  public double number19; // required
  public double number20; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NUMBER1((short)1, "number1"),
    NUMBER2((short)2, "number2"),
    NUMBER3((short)3, "number3"),
    NUMBER4((short)4, "number4"),
    NUMBER5((short)5, "number5"),
    NUMBER6((short)6, "number6"),
    NUMBER7((short)7, "number7"),
    NUMBER8((short)8, "number8"),
    NUMBER9((short)9, "number9"),
    NUMBER10((short)10, "number10"),
    NUMBER11((short)11, "number11"),
    NUMBER12((short)12, "number12"),
    NUMBER13((short)13, "number13"),
    NUMBER14((short)14, "number14"),
    NUMBER15((short)15, "number15"),
    NUMBER16((short)16, "number16"),
    NUMBER17((short)17, "number17"),
    NUMBER18((short)18, "number18"),
    NUMBER19((short)19, "number19"),
    NUMBER20((short)20, "number20");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUMBER1
          return NUMBER1;
        case 2: // NUMBER2
          return NUMBER2;
        case 3: // NUMBER3
          return NUMBER3;
        case 4: // NUMBER4
          return NUMBER4;
        case 5: // NUMBER5
          return NUMBER5;
        case 6: // NUMBER6
          return NUMBER6;
        case 7: // NUMBER7
          return NUMBER7;
        case 8: // NUMBER8
          return NUMBER8;
        case 9: // NUMBER9
          return NUMBER9;
        case 10: // NUMBER10
          return NUMBER10;
        case 11: // NUMBER11
          return NUMBER11;
        case 12: // NUMBER12
          return NUMBER12;
        case 13: // NUMBER13
          return NUMBER13;
        case 14: // NUMBER14
          return NUMBER14;
        case 15: // NUMBER15
          return NUMBER15;
        case 16: // NUMBER16
          return NUMBER16;
        case 17: // NUMBER17
          return NUMBER17;
        case 18: // NUMBER18
          return NUMBER18;
        case 19: // NUMBER19
          return NUMBER19;
        case 20: // NUMBER20
          return NUMBER20;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMBER1_ISSET_ID = 0;
  private static final int __NUMBER2_ISSET_ID = 1;
  private static final int __NUMBER3_ISSET_ID = 2;
  private static final int __NUMBER4_ISSET_ID = 3;
  private static final int __NUMBER5_ISSET_ID = 4;
  private static final int __NUMBER6_ISSET_ID = 5;
  private static final int __NUMBER7_ISSET_ID = 6;
  private static final int __NUMBER8_ISSET_ID = 7;
  private static final int __NUMBER9_ISSET_ID = 8;
  private static final int __NUMBER10_ISSET_ID = 9;
  private static final int __NUMBER11_ISSET_ID = 10;
  private static final int __NUMBER12_ISSET_ID = 11;
  private static final int __NUMBER13_ISSET_ID = 12;
  private static final int __NUMBER14_ISSET_ID = 13;
  private static final int __NUMBER15_ISSET_ID = 14;
  private static final int __NUMBER16_ISSET_ID = 15;
  private static final int __NUMBER17_ISSET_ID = 16;
  private static final int __NUMBER18_ISSET_ID = 17;
  private static final int __NUMBER19_ISSET_ID = 18;
  private static final int __NUMBER20_ISSET_ID = 19;
  private int __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUMBER1, new org.apache.thrift.meta_data.FieldMetaData("number1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUMBER2, new org.apache.thrift.meta_data.FieldMetaData("number2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUMBER3, new org.apache.thrift.meta_data.FieldMetaData("number3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUMBER4, new org.apache.thrift.meta_data.FieldMetaData("number4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUMBER5, new org.apache.thrift.meta_data.FieldMetaData("number5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUMBER6, new org.apache.thrift.meta_data.FieldMetaData("number6", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUMBER7, new org.apache.thrift.meta_data.FieldMetaData("number7", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUMBER8, new org.apache.thrift.meta_data.FieldMetaData("number8", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUMBER9, new org.apache.thrift.meta_data.FieldMetaData("number9", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUMBER10, new org.apache.thrift.meta_data.FieldMetaData("number10", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.NUMBER11, new org.apache.thrift.meta_data.FieldMetaData("number11", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NUMBER12, new org.apache.thrift.meta_data.FieldMetaData("number12", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NUMBER13, new org.apache.thrift.meta_data.FieldMetaData("number13", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NUMBER14, new org.apache.thrift.meta_data.FieldMetaData("number14", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NUMBER15, new org.apache.thrift.meta_data.FieldMetaData("number15", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NUMBER16, new org.apache.thrift.meta_data.FieldMetaData("number16", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NUMBER17, new org.apache.thrift.meta_data.FieldMetaData("number17", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NUMBER18, new org.apache.thrift.meta_data.FieldMetaData("number18", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NUMBER19, new org.apache.thrift.meta_data.FieldMetaData("number19", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NUMBER20, new org.apache.thrift.meta_data.FieldMetaData("number20", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Data3Thrift.class, metaDataMap);
  }

  public Data3Thrift() {
  }

  public Data3Thrift(
    int number1,
    int number2,
    int number3,
    int number4,
    int number5,
    int number6,
    int number7,
    int number8,
    int number9,
    int number10,
    double number11,
    double number12,
    double number13,
    double number14,
    double number15,
    double number16,
    double number17,
    double number18,
    double number19,
    double number20)
  {
    this();
    this.number1 = number1;
    setNumber1IsSet(true);
    this.number2 = number2;
    setNumber2IsSet(true);
    this.number3 = number3;
    setNumber3IsSet(true);
    this.number4 = number4;
    setNumber4IsSet(true);
    this.number5 = number5;
    setNumber5IsSet(true);
    this.number6 = number6;
    setNumber6IsSet(true);
    this.number7 = number7;
    setNumber7IsSet(true);
    this.number8 = number8;
    setNumber8IsSet(true);
    this.number9 = number9;
    setNumber9IsSet(true);
    this.number10 = number10;
    setNumber10IsSet(true);
    this.number11 = number11;
    setNumber11IsSet(true);
    this.number12 = number12;
    setNumber12IsSet(true);
    this.number13 = number13;
    setNumber13IsSet(true);
    this.number14 = number14;
    setNumber14IsSet(true);
    this.number15 = number15;
    setNumber15IsSet(true);
    this.number16 = number16;
    setNumber16IsSet(true);
    this.number17 = number17;
    setNumber17IsSet(true);
    this.number18 = number18;
    setNumber18IsSet(true);
    this.number19 = number19;
    setNumber19IsSet(true);
    this.number20 = number20;
    setNumber20IsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Data3Thrift(Data3Thrift other) {
    __isset_bitfield = other.__isset_bitfield;
    this.number1 = other.number1;
    this.number2 = other.number2;
    this.number3 = other.number3;
    this.number4 = other.number4;
    this.number5 = other.number5;
    this.number6 = other.number6;
    this.number7 = other.number7;
    this.number8 = other.number8;
    this.number9 = other.number9;
    this.number10 = other.number10;
    this.number11 = other.number11;
    this.number12 = other.number12;
    this.number13 = other.number13;
    this.number14 = other.number14;
    this.number15 = other.number15;
    this.number16 = other.number16;
    this.number17 = other.number17;
    this.number18 = other.number18;
    this.number19 = other.number19;
    this.number20 = other.number20;
  }

  public Data3Thrift deepCopy() {
    return new Data3Thrift(this);
  }

  @Override
  public void clear() {
    setNumber1IsSet(false);
    this.number1 = 0;
    setNumber2IsSet(false);
    this.number2 = 0;
    setNumber3IsSet(false);
    this.number3 = 0;
    setNumber4IsSet(false);
    this.number4 = 0;
    setNumber5IsSet(false);
    this.number5 = 0;
    setNumber6IsSet(false);
    this.number6 = 0;
    setNumber7IsSet(false);
    this.number7 = 0;
    setNumber8IsSet(false);
    this.number8 = 0;
    setNumber9IsSet(false);
    this.number9 = 0;
    setNumber10IsSet(false);
    this.number10 = 0;
    setNumber11IsSet(false);
    this.number11 = 0.0;
    setNumber12IsSet(false);
    this.number12 = 0.0;
    setNumber13IsSet(false);
    this.number13 = 0.0;
    setNumber14IsSet(false);
    this.number14 = 0.0;
    setNumber15IsSet(false);
    this.number15 = 0.0;
    setNumber16IsSet(false);
    this.number16 = 0.0;
    setNumber17IsSet(false);
    this.number17 = 0.0;
    setNumber18IsSet(false);
    this.number18 = 0.0;
    setNumber19IsSet(false);
    this.number19 = 0.0;
    setNumber20IsSet(false);
    this.number20 = 0.0;
  }

  public int getNumber1() {
    return this.number1;
  }

  public Data3Thrift setNumber1(int number1) {
    this.number1 = number1;
    setNumber1IsSet(true);
    return this;
  }

  public void unsetNumber1() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBER1_ISSET_ID);
  }

  /** Returns true if field number1 is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber1() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBER1_ISSET_ID);
  }

  public void setNumber1IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBER1_ISSET_ID, value);
  }

  public int getNumber2() {
    return this.number2;
  }

  public Data3Thrift setNumber2(int number2) {
    this.number2 = number2;
    setNumber2IsSet(true);
    return this;
  }

  public void unsetNumber2() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBER2_ISSET_ID);
  }

  /** Returns true if field number2 is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber2() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBER2_ISSET_ID);
  }

  public void setNumber2IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBER2_ISSET_ID, value);
  }

  public int getNumber3() {
    return this.number3;
  }

  public Data3Thrift setNumber3(int number3) {
    this.number3 = number3;
    setNumber3IsSet(true);
    return this;
  }

  public void unsetNumber3() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBER3_ISSET_ID);
  }

  /** Returns true if field number3 is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber3() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBER3_ISSET_ID);
  }

  public void setNumber3IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBER3_ISSET_ID, value);
  }

  public int getNumber4() {
    return this.number4;
  }

  public Data3Thrift setNumber4(int number4) {
    this.number4 = number4;
    setNumber4IsSet(true);
    return this;
  }

  public void unsetNumber4() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBER4_ISSET_ID);
  }

  /** Returns true if field number4 is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber4() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBER4_ISSET_ID);
  }

  public void setNumber4IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBER4_ISSET_ID, value);
  }

  public int getNumber5() {
    return this.number5;
  }

  public Data3Thrift setNumber5(int number5) {
    this.number5 = number5;
    setNumber5IsSet(true);
    return this;
  }

  public void unsetNumber5() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBER5_ISSET_ID);
  }

  /** Returns true if field number5 is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber5() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBER5_ISSET_ID);
  }

  public void setNumber5IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBER5_ISSET_ID, value);
  }

  public int getNumber6() {
    return this.number6;
  }

  public Data3Thrift setNumber6(int number6) {
    this.number6 = number6;
    setNumber6IsSet(true);
    return this;
  }

  public void unsetNumber6() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBER6_ISSET_ID);
  }

  /** Returns true if field number6 is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber6() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBER6_ISSET_ID);
  }

  public void setNumber6IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBER6_ISSET_ID, value);
  }

  public int getNumber7() {
    return this.number7;
  }

  public Data3Thrift setNumber7(int number7) {
    this.number7 = number7;
    setNumber7IsSet(true);
    return this;
  }

  public void unsetNumber7() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBER7_ISSET_ID);
  }

  /** Returns true if field number7 is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber7() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBER7_ISSET_ID);
  }

  public void setNumber7IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBER7_ISSET_ID, value);
  }

  public int getNumber8() {
    return this.number8;
  }

  public Data3Thrift setNumber8(int number8) {
    this.number8 = number8;
    setNumber8IsSet(true);
    return this;
  }

  public void unsetNumber8() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBER8_ISSET_ID);
  }

  /** Returns true if field number8 is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber8() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBER8_ISSET_ID);
  }

  public void setNumber8IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBER8_ISSET_ID, value);
  }

  public int getNumber9() {
    return this.number9;
  }

  public Data3Thrift setNumber9(int number9) {
    this.number9 = number9;
    setNumber9IsSet(true);
    return this;
  }

  public void unsetNumber9() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBER9_ISSET_ID);
  }

  /** Returns true if field number9 is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber9() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBER9_ISSET_ID);
  }

  public void setNumber9IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBER9_ISSET_ID, value);
  }

  public int getNumber10() {
    return this.number10;
  }

  public Data3Thrift setNumber10(int number10) {
    this.number10 = number10;
    setNumber10IsSet(true);
    return this;
  }

  public void unsetNumber10() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBER10_ISSET_ID);
  }

  /** Returns true if field number10 is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber10() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBER10_ISSET_ID);
  }

  public void setNumber10IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBER10_ISSET_ID, value);
  }

  public double getNumber11() {
    return this.number11;
  }

  public Data3Thrift setNumber11(double number11) {
    this.number11 = number11;
    setNumber11IsSet(true);
    return this;
  }

  public void unsetNumber11() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBER11_ISSET_ID);
  }

  /** Returns true if field number11 is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber11() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBER11_ISSET_ID);
  }

  public void setNumber11IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBER11_ISSET_ID, value);
  }

  public double getNumber12() {
    return this.number12;
  }

  public Data3Thrift setNumber12(double number12) {
    this.number12 = number12;
    setNumber12IsSet(true);
    return this;
  }

  public void unsetNumber12() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBER12_ISSET_ID);
  }

  /** Returns true if field number12 is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber12() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBER12_ISSET_ID);
  }

  public void setNumber12IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBER12_ISSET_ID, value);
  }

  public double getNumber13() {
    return this.number13;
  }

  public Data3Thrift setNumber13(double number13) {
    this.number13 = number13;
    setNumber13IsSet(true);
    return this;
  }

  public void unsetNumber13() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBER13_ISSET_ID);
  }

  /** Returns true if field number13 is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber13() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBER13_ISSET_ID);
  }

  public void setNumber13IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBER13_ISSET_ID, value);
  }

  public double getNumber14() {
    return this.number14;
  }

  public Data3Thrift setNumber14(double number14) {
    this.number14 = number14;
    setNumber14IsSet(true);
    return this;
  }

  public void unsetNumber14() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBER14_ISSET_ID);
  }

  /** Returns true if field number14 is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber14() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBER14_ISSET_ID);
  }

  public void setNumber14IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBER14_ISSET_ID, value);
  }

  public double getNumber15() {
    return this.number15;
  }

  public Data3Thrift setNumber15(double number15) {
    this.number15 = number15;
    setNumber15IsSet(true);
    return this;
  }

  public void unsetNumber15() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBER15_ISSET_ID);
  }

  /** Returns true if field number15 is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber15() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBER15_ISSET_ID);
  }

  public void setNumber15IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBER15_ISSET_ID, value);
  }

  public double getNumber16() {
    return this.number16;
  }

  public Data3Thrift setNumber16(double number16) {
    this.number16 = number16;
    setNumber16IsSet(true);
    return this;
  }

  public void unsetNumber16() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBER16_ISSET_ID);
  }

  /** Returns true if field number16 is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber16() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBER16_ISSET_ID);
  }

  public void setNumber16IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBER16_ISSET_ID, value);
  }

  public double getNumber17() {
    return this.number17;
  }

  public Data3Thrift setNumber17(double number17) {
    this.number17 = number17;
    setNumber17IsSet(true);
    return this;
  }

  public void unsetNumber17() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBER17_ISSET_ID);
  }

  /** Returns true if field number17 is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber17() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBER17_ISSET_ID);
  }

  public void setNumber17IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBER17_ISSET_ID, value);
  }

  public double getNumber18() {
    return this.number18;
  }

  public Data3Thrift setNumber18(double number18) {
    this.number18 = number18;
    setNumber18IsSet(true);
    return this;
  }

  public void unsetNumber18() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBER18_ISSET_ID);
  }

  /** Returns true if field number18 is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber18() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBER18_ISSET_ID);
  }

  public void setNumber18IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBER18_ISSET_ID, value);
  }

  public double getNumber19() {
    return this.number19;
  }

  public Data3Thrift setNumber19(double number19) {
    this.number19 = number19;
    setNumber19IsSet(true);
    return this;
  }

  public void unsetNumber19() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBER19_ISSET_ID);
  }

  /** Returns true if field number19 is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber19() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBER19_ISSET_ID);
  }

  public void setNumber19IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBER19_ISSET_ID, value);
  }

  public double getNumber20() {
    return this.number20;
  }

  public Data3Thrift setNumber20(double number20) {
    this.number20 = number20;
    setNumber20IsSet(true);
    return this;
  }

  public void unsetNumber20() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBER20_ISSET_ID);
  }

  /** Returns true if field number20 is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber20() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBER20_ISSET_ID);
  }

  public void setNumber20IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBER20_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NUMBER1:
      if (value == null) {
        unsetNumber1();
      } else {
        setNumber1((java.lang.Integer)value);
      }
      break;

    case NUMBER2:
      if (value == null) {
        unsetNumber2();
      } else {
        setNumber2((java.lang.Integer)value);
      }
      break;

    case NUMBER3:
      if (value == null) {
        unsetNumber3();
      } else {
        setNumber3((java.lang.Integer)value);
      }
      break;

    case NUMBER4:
      if (value == null) {
        unsetNumber4();
      } else {
        setNumber4((java.lang.Integer)value);
      }
      break;

    case NUMBER5:
      if (value == null) {
        unsetNumber5();
      } else {
        setNumber5((java.lang.Integer)value);
      }
      break;

    case NUMBER6:
      if (value == null) {
        unsetNumber6();
      } else {
        setNumber6((java.lang.Integer)value);
      }
      break;

    case NUMBER7:
      if (value == null) {
        unsetNumber7();
      } else {
        setNumber7((java.lang.Integer)value);
      }
      break;

    case NUMBER8:
      if (value == null) {
        unsetNumber8();
      } else {
        setNumber8((java.lang.Integer)value);
      }
      break;

    case NUMBER9:
      if (value == null) {
        unsetNumber9();
      } else {
        setNumber9((java.lang.Integer)value);
      }
      break;

    case NUMBER10:
      if (value == null) {
        unsetNumber10();
      } else {
        setNumber10((java.lang.Integer)value);
      }
      break;

    case NUMBER11:
      if (value == null) {
        unsetNumber11();
      } else {
        setNumber11((java.lang.Double)value);
      }
      break;

    case NUMBER12:
      if (value == null) {
        unsetNumber12();
      } else {
        setNumber12((java.lang.Double)value);
      }
      break;

    case NUMBER13:
      if (value == null) {
        unsetNumber13();
      } else {
        setNumber13((java.lang.Double)value);
      }
      break;

    case NUMBER14:
      if (value == null) {
        unsetNumber14();
      } else {
        setNumber14((java.lang.Double)value);
      }
      break;

    case NUMBER15:
      if (value == null) {
        unsetNumber15();
      } else {
        setNumber15((java.lang.Double)value);
      }
      break;

    case NUMBER16:
      if (value == null) {
        unsetNumber16();
      } else {
        setNumber16((java.lang.Double)value);
      }
      break;

    case NUMBER17:
      if (value == null) {
        unsetNumber17();
      } else {
        setNumber17((java.lang.Double)value);
      }
      break;

    case NUMBER18:
      if (value == null) {
        unsetNumber18();
      } else {
        setNumber18((java.lang.Double)value);
      }
      break;

    case NUMBER19:
      if (value == null) {
        unsetNumber19();
      } else {
        setNumber19((java.lang.Double)value);
      }
      break;

    case NUMBER20:
      if (value == null) {
        unsetNumber20();
      } else {
        setNumber20((java.lang.Double)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NUMBER1:
      return getNumber1();

    case NUMBER2:
      return getNumber2();

    case NUMBER3:
      return getNumber3();

    case NUMBER4:
      return getNumber4();

    case NUMBER5:
      return getNumber5();

    case NUMBER6:
      return getNumber6();

    case NUMBER7:
      return getNumber7();

    case NUMBER8:
      return getNumber8();

    case NUMBER9:
      return getNumber9();

    case NUMBER10:
      return getNumber10();

    case NUMBER11:
      return getNumber11();

    case NUMBER12:
      return getNumber12();

    case NUMBER13:
      return getNumber13();

    case NUMBER14:
      return getNumber14();

    case NUMBER15:
      return getNumber15();

    case NUMBER16:
      return getNumber16();

    case NUMBER17:
      return getNumber17();

    case NUMBER18:
      return getNumber18();

    case NUMBER19:
      return getNumber19();

    case NUMBER20:
      return getNumber20();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NUMBER1:
      return isSetNumber1();
    case NUMBER2:
      return isSetNumber2();
    case NUMBER3:
      return isSetNumber3();
    case NUMBER4:
      return isSetNumber4();
    case NUMBER5:
      return isSetNumber5();
    case NUMBER6:
      return isSetNumber6();
    case NUMBER7:
      return isSetNumber7();
    case NUMBER8:
      return isSetNumber8();
    case NUMBER9:
      return isSetNumber9();
    case NUMBER10:
      return isSetNumber10();
    case NUMBER11:
      return isSetNumber11();
    case NUMBER12:
      return isSetNumber12();
    case NUMBER13:
      return isSetNumber13();
    case NUMBER14:
      return isSetNumber14();
    case NUMBER15:
      return isSetNumber15();
    case NUMBER16:
      return isSetNumber16();
    case NUMBER17:
      return isSetNumber17();
    case NUMBER18:
      return isSetNumber18();
    case NUMBER19:
      return isSetNumber19();
    case NUMBER20:
      return isSetNumber20();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof Data3Thrift)
      return this.equals((Data3Thrift)that);
    return false;
  }

  public boolean equals(Data3Thrift that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_number1 = true;
    boolean that_present_number1 = true;
    if (this_present_number1 || that_present_number1) {
      if (!(this_present_number1 && that_present_number1))
        return false;
      if (this.number1 != that.number1)
        return false;
    }

    boolean this_present_number2 = true;
    boolean that_present_number2 = true;
    if (this_present_number2 || that_present_number2) {
      if (!(this_present_number2 && that_present_number2))
        return false;
      if (this.number2 != that.number2)
        return false;
    }

    boolean this_present_number3 = true;
    boolean that_present_number3 = true;
    if (this_present_number3 || that_present_number3) {
      if (!(this_present_number3 && that_present_number3))
        return false;
      if (this.number3 != that.number3)
        return false;
    }

    boolean this_present_number4 = true;
    boolean that_present_number4 = true;
    if (this_present_number4 || that_present_number4) {
      if (!(this_present_number4 && that_present_number4))
        return false;
      if (this.number4 != that.number4)
        return false;
    }

    boolean this_present_number5 = true;
    boolean that_present_number5 = true;
    if (this_present_number5 || that_present_number5) {
      if (!(this_present_number5 && that_present_number5))
        return false;
      if (this.number5 != that.number5)
        return false;
    }

    boolean this_present_number6 = true;
    boolean that_present_number6 = true;
    if (this_present_number6 || that_present_number6) {
      if (!(this_present_number6 && that_present_number6))
        return false;
      if (this.number6 != that.number6)
        return false;
    }

    boolean this_present_number7 = true;
    boolean that_present_number7 = true;
    if (this_present_number7 || that_present_number7) {
      if (!(this_present_number7 && that_present_number7))
        return false;
      if (this.number7 != that.number7)
        return false;
    }

    boolean this_present_number8 = true;
    boolean that_present_number8 = true;
    if (this_present_number8 || that_present_number8) {
      if (!(this_present_number8 && that_present_number8))
        return false;
      if (this.number8 != that.number8)
        return false;
    }

    boolean this_present_number9 = true;
    boolean that_present_number9 = true;
    if (this_present_number9 || that_present_number9) {
      if (!(this_present_number9 && that_present_number9))
        return false;
      if (this.number9 != that.number9)
        return false;
    }

    boolean this_present_number10 = true;
    boolean that_present_number10 = true;
    if (this_present_number10 || that_present_number10) {
      if (!(this_present_number10 && that_present_number10))
        return false;
      if (this.number10 != that.number10)
        return false;
    }

    boolean this_present_number11 = true;
    boolean that_present_number11 = true;
    if (this_present_number11 || that_present_number11) {
      if (!(this_present_number11 && that_present_number11))
        return false;
      if (this.number11 != that.number11)
        return false;
    }

    boolean this_present_number12 = true;
    boolean that_present_number12 = true;
    if (this_present_number12 || that_present_number12) {
      if (!(this_present_number12 && that_present_number12))
        return false;
      if (this.number12 != that.number12)
        return false;
    }

    boolean this_present_number13 = true;
    boolean that_present_number13 = true;
    if (this_present_number13 || that_present_number13) {
      if (!(this_present_number13 && that_present_number13))
        return false;
      if (this.number13 != that.number13)
        return false;
    }

    boolean this_present_number14 = true;
    boolean that_present_number14 = true;
    if (this_present_number14 || that_present_number14) {
      if (!(this_present_number14 && that_present_number14))
        return false;
      if (this.number14 != that.number14)
        return false;
    }

    boolean this_present_number15 = true;
    boolean that_present_number15 = true;
    if (this_present_number15 || that_present_number15) {
      if (!(this_present_number15 && that_present_number15))
        return false;
      if (this.number15 != that.number15)
        return false;
    }

    boolean this_present_number16 = true;
    boolean that_present_number16 = true;
    if (this_present_number16 || that_present_number16) {
      if (!(this_present_number16 && that_present_number16))
        return false;
      if (this.number16 != that.number16)
        return false;
    }

    boolean this_present_number17 = true;
    boolean that_present_number17 = true;
    if (this_present_number17 || that_present_number17) {
      if (!(this_present_number17 && that_present_number17))
        return false;
      if (this.number17 != that.number17)
        return false;
    }

    boolean this_present_number18 = true;
    boolean that_present_number18 = true;
    if (this_present_number18 || that_present_number18) {
      if (!(this_present_number18 && that_present_number18))
        return false;
      if (this.number18 != that.number18)
        return false;
    }

    boolean this_present_number19 = true;
    boolean that_present_number19 = true;
    if (this_present_number19 || that_present_number19) {
      if (!(this_present_number19 && that_present_number19))
        return false;
      if (this.number19 != that.number19)
        return false;
    }

    boolean this_present_number20 = true;
    boolean that_present_number20 = true;
    if (this_present_number20 || that_present_number20) {
      if (!(this_present_number20 && that_present_number20))
        return false;
      if (this.number20 != that.number20)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + number1;

    hashCode = hashCode * 8191 + number2;

    hashCode = hashCode * 8191 + number3;

    hashCode = hashCode * 8191 + number4;

    hashCode = hashCode * 8191 + number5;

    hashCode = hashCode * 8191 + number6;

    hashCode = hashCode * 8191 + number7;

    hashCode = hashCode * 8191 + number8;

    hashCode = hashCode * 8191 + number9;

    hashCode = hashCode * 8191 + number10;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(number11);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(number12);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(number13);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(number14);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(number15);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(number16);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(number17);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(number18);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(number19);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(number20);

    return hashCode;
  }

  @Override
  public int compareTo(Data3Thrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetNumber1(), other.isSetNumber1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number1, other.number1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumber2(), other.isSetNumber2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number2, other.number2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumber3(), other.isSetNumber3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number3, other.number3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumber4(), other.isSetNumber4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number4, other.number4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumber5(), other.isSetNumber5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number5, other.number5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumber6(), other.isSetNumber6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number6, other.number6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumber7(), other.isSetNumber7());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber7()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number7, other.number7);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumber8(), other.isSetNumber8());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber8()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number8, other.number8);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumber9(), other.isSetNumber9());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber9()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number9, other.number9);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumber10(), other.isSetNumber10());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber10()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number10, other.number10);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumber11(), other.isSetNumber11());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber11()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number11, other.number11);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumber12(), other.isSetNumber12());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber12()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number12, other.number12);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumber13(), other.isSetNumber13());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber13()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number13, other.number13);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumber14(), other.isSetNumber14());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber14()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number14, other.number14);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumber15(), other.isSetNumber15());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber15()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number15, other.number15);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumber16(), other.isSetNumber16());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber16()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number16, other.number16);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumber17(), other.isSetNumber17());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber17()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number17, other.number17);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumber18(), other.isSetNumber18());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber18()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number18, other.number18);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumber19(), other.isSetNumber19());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber19()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number19, other.number19);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumber20(), other.isSetNumber20());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber20()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number20, other.number20);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Data3Thrift(");
    boolean first = true;

    sb.append("number1:");
    sb.append(this.number1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number2:");
    sb.append(this.number2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number3:");
    sb.append(this.number3);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number4:");
    sb.append(this.number4);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number5:");
    sb.append(this.number5);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number6:");
    sb.append(this.number6);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number7:");
    sb.append(this.number7);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number8:");
    sb.append(this.number8);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number9:");
    sb.append(this.number9);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number10:");
    sb.append(this.number10);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number11:");
    sb.append(this.number11);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number12:");
    sb.append(this.number12);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number13:");
    sb.append(this.number13);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number14:");
    sb.append(this.number14);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number15:");
    sb.append(this.number15);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number16:");
    sb.append(this.number16);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number17:");
    sb.append(this.number17);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number18:");
    sb.append(this.number18);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number19:");
    sb.append(this.number19);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number20:");
    sb.append(this.number20);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class Data3ThriftStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public Data3ThriftStandardScheme getScheme() {
      return new Data3ThriftStandardScheme();
    }
  }

  private static class Data3ThriftStandardScheme extends org.apache.thrift.scheme.StandardScheme<Data3Thrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Data3Thrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NUMBER1
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.number1 = iprot.readI32();
              struct.setNumber1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUMBER2
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.number2 = iprot.readI32();
              struct.setNumber2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUMBER3
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.number3 = iprot.readI32();
              struct.setNumber3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NUMBER4
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.number4 = iprot.readI32();
              struct.setNumber4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // NUMBER5
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.number5 = iprot.readI32();
              struct.setNumber5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // NUMBER6
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.number6 = iprot.readI32();
              struct.setNumber6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // NUMBER7
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.number7 = iprot.readI32();
              struct.setNumber7IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NUMBER8
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.number8 = iprot.readI32();
              struct.setNumber8IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // NUMBER9
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.number9 = iprot.readI32();
              struct.setNumber9IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NUMBER10
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.number10 = iprot.readI32();
              struct.setNumber10IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // NUMBER11
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.number11 = iprot.readDouble();
              struct.setNumber11IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // NUMBER12
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.number12 = iprot.readDouble();
              struct.setNumber12IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // NUMBER13
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.number13 = iprot.readDouble();
              struct.setNumber13IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // NUMBER14
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.number14 = iprot.readDouble();
              struct.setNumber14IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // NUMBER15
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.number15 = iprot.readDouble();
              struct.setNumber15IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // NUMBER16
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.number16 = iprot.readDouble();
              struct.setNumber16IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // NUMBER17
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.number17 = iprot.readDouble();
              struct.setNumber17IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // NUMBER18
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.number18 = iprot.readDouble();
              struct.setNumber18IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // NUMBER19
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.number19 = iprot.readDouble();
              struct.setNumber19IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // NUMBER20
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.number20 = iprot.readDouble();
              struct.setNumber20IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Data3Thrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NUMBER1_FIELD_DESC);
      oprot.writeI32(struct.number1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER2_FIELD_DESC);
      oprot.writeI32(struct.number2);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER3_FIELD_DESC);
      oprot.writeI32(struct.number3);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER4_FIELD_DESC);
      oprot.writeI32(struct.number4);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER5_FIELD_DESC);
      oprot.writeI32(struct.number5);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER6_FIELD_DESC);
      oprot.writeI32(struct.number6);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER7_FIELD_DESC);
      oprot.writeI32(struct.number7);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER8_FIELD_DESC);
      oprot.writeI32(struct.number8);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER9_FIELD_DESC);
      oprot.writeI32(struct.number9);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER10_FIELD_DESC);
      oprot.writeI32(struct.number10);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER11_FIELD_DESC);
      oprot.writeDouble(struct.number11);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER12_FIELD_DESC);
      oprot.writeDouble(struct.number12);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER13_FIELD_DESC);
      oprot.writeDouble(struct.number13);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER14_FIELD_DESC);
      oprot.writeDouble(struct.number14);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER15_FIELD_DESC);
      oprot.writeDouble(struct.number15);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER16_FIELD_DESC);
      oprot.writeDouble(struct.number16);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER17_FIELD_DESC);
      oprot.writeDouble(struct.number17);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER18_FIELD_DESC);
      oprot.writeDouble(struct.number18);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER19_FIELD_DESC);
      oprot.writeDouble(struct.number19);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER20_FIELD_DESC);
      oprot.writeDouble(struct.number20);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class Data3ThriftTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public Data3ThriftTupleScheme getScheme() {
      return new Data3ThriftTupleScheme();
    }
  }

  private static class Data3ThriftTupleScheme extends org.apache.thrift.scheme.TupleScheme<Data3Thrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Data3Thrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNumber1()) {
        optionals.set(0);
      }
      if (struct.isSetNumber2()) {
        optionals.set(1);
      }
      if (struct.isSetNumber3()) {
        optionals.set(2);
      }
      if (struct.isSetNumber4()) {
        optionals.set(3);
      }
      if (struct.isSetNumber5()) {
        optionals.set(4);
      }
      if (struct.isSetNumber6()) {
        optionals.set(5);
      }
      if (struct.isSetNumber7()) {
        optionals.set(6);
      }
      if (struct.isSetNumber8()) {
        optionals.set(7);
      }
      if (struct.isSetNumber9()) {
        optionals.set(8);
      }
      if (struct.isSetNumber10()) {
        optionals.set(9);
      }
      if (struct.isSetNumber11()) {
        optionals.set(10);
      }
      if (struct.isSetNumber12()) {
        optionals.set(11);
      }
      if (struct.isSetNumber13()) {
        optionals.set(12);
      }
      if (struct.isSetNumber14()) {
        optionals.set(13);
      }
      if (struct.isSetNumber15()) {
        optionals.set(14);
      }
      if (struct.isSetNumber16()) {
        optionals.set(15);
      }
      if (struct.isSetNumber17()) {
        optionals.set(16);
      }
      if (struct.isSetNumber18()) {
        optionals.set(17);
      }
      if (struct.isSetNumber19()) {
        optionals.set(18);
      }
      if (struct.isSetNumber20()) {
        optionals.set(19);
      }
      oprot.writeBitSet(optionals, 20);
      if (struct.isSetNumber1()) {
        oprot.writeI32(struct.number1);
      }
      if (struct.isSetNumber2()) {
        oprot.writeI32(struct.number2);
      }
      if (struct.isSetNumber3()) {
        oprot.writeI32(struct.number3);
      }
      if (struct.isSetNumber4()) {
        oprot.writeI32(struct.number4);
      }
      if (struct.isSetNumber5()) {
        oprot.writeI32(struct.number5);
      }
      if (struct.isSetNumber6()) {
        oprot.writeI32(struct.number6);
      }
      if (struct.isSetNumber7()) {
        oprot.writeI32(struct.number7);
      }
      if (struct.isSetNumber8()) {
        oprot.writeI32(struct.number8);
      }
      if (struct.isSetNumber9()) {
        oprot.writeI32(struct.number9);
      }
      if (struct.isSetNumber10()) {
        oprot.writeI32(struct.number10);
      }
      if (struct.isSetNumber11()) {
        oprot.writeDouble(struct.number11);
      }
      if (struct.isSetNumber12()) {
        oprot.writeDouble(struct.number12);
      }
      if (struct.isSetNumber13()) {
        oprot.writeDouble(struct.number13);
      }
      if (struct.isSetNumber14()) {
        oprot.writeDouble(struct.number14);
      }
      if (struct.isSetNumber15()) {
        oprot.writeDouble(struct.number15);
      }
      if (struct.isSetNumber16()) {
        oprot.writeDouble(struct.number16);
      }
      if (struct.isSetNumber17()) {
        oprot.writeDouble(struct.number17);
      }
      if (struct.isSetNumber18()) {
        oprot.writeDouble(struct.number18);
      }
      if (struct.isSetNumber19()) {
        oprot.writeDouble(struct.number19);
      }
      if (struct.isSetNumber20()) {
        oprot.writeDouble(struct.number20);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Data3Thrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(20);
      if (incoming.get(0)) {
        struct.number1 = iprot.readI32();
        struct.setNumber1IsSet(true);
      }
      if (incoming.get(1)) {
        struct.number2 = iprot.readI32();
        struct.setNumber2IsSet(true);
      }
      if (incoming.get(2)) {
        struct.number3 = iprot.readI32();
        struct.setNumber3IsSet(true);
      }
      if (incoming.get(3)) {
        struct.number4 = iprot.readI32();
        struct.setNumber4IsSet(true);
      }
      if (incoming.get(4)) {
        struct.number5 = iprot.readI32();
        struct.setNumber5IsSet(true);
      }
      if (incoming.get(5)) {
        struct.number6 = iprot.readI32();
        struct.setNumber6IsSet(true);
      }
      if (incoming.get(6)) {
        struct.number7 = iprot.readI32();
        struct.setNumber7IsSet(true);
      }
      if (incoming.get(7)) {
        struct.number8 = iprot.readI32();
        struct.setNumber8IsSet(true);
      }
      if (incoming.get(8)) {
        struct.number9 = iprot.readI32();
        struct.setNumber9IsSet(true);
      }
      if (incoming.get(9)) {
        struct.number10 = iprot.readI32();
        struct.setNumber10IsSet(true);
      }
      if (incoming.get(10)) {
        struct.number11 = iprot.readDouble();
        struct.setNumber11IsSet(true);
      }
      if (incoming.get(11)) {
        struct.number12 = iprot.readDouble();
        struct.setNumber12IsSet(true);
      }
      if (incoming.get(12)) {
        struct.number13 = iprot.readDouble();
        struct.setNumber13IsSet(true);
      }
      if (incoming.get(13)) {
        struct.number14 = iprot.readDouble();
        struct.setNumber14IsSet(true);
      }
      if (incoming.get(14)) {
        struct.number15 = iprot.readDouble();
        struct.setNumber15IsSet(true);
      }
      if (incoming.get(15)) {
        struct.number16 = iprot.readDouble();
        struct.setNumber16IsSet(true);
      }
      if (incoming.get(16)) {
        struct.number17 = iprot.readDouble();
        struct.setNumber17IsSet(true);
      }
      if (incoming.get(17)) {
        struct.number18 = iprot.readDouble();
        struct.setNumber18IsSet(true);
      }
      if (incoming.get(18)) {
        struct.number19 = iprot.readDouble();
        struct.setNumber19IsSet(true);
      }
      if (incoming.get(19)) {
        struct.number20 = iprot.readDouble();
        struct.setNumber20IsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

