/**
 * Autogenerated by Thrift Compiler (0.16.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package generated.data2.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.16.0)", date = "2022-07-20")
public class Data2Thrift implements org.apache.thrift.TBase<Data2Thrift, Data2Thrift._Fields>, java.io.Serializable, Cloneable, Comparable<Data2Thrift> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Data2Thrift");

  private static final org.apache.thrift.protocol.TField NUMBER1_FIELD_DESC = new org.apache.thrift.protocol.TField("number1", org.apache.thrift.protocol.TType.DOUBLE, (short)1);
  private static final org.apache.thrift.protocol.TField NUMBER2_FIELD_DESC = new org.apache.thrift.protocol.TField("number2", org.apache.thrift.protocol.TType.DOUBLE, (short)2);
  private static final org.apache.thrift.protocol.TField STRING1_FIELD_DESC = new org.apache.thrift.protocol.TField("string1", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STRING2_FIELD_DESC = new org.apache.thrift.protocol.TField("string2", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField STRING3_FIELD_DESC = new org.apache.thrift.protocol.TField("string3", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField STRING4_FIELD_DESC = new org.apache.thrift.protocol.TField("string4", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField STRING5_FIELD_DESC = new org.apache.thrift.protocol.TField("string5", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField STRING6_FIELD_DESC = new org.apache.thrift.protocol.TField("string6", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField STRING7_FIELD_DESC = new org.apache.thrift.protocol.TField("string7", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField STRING8_FIELD_DESC = new org.apache.thrift.protocol.TField("string8", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new Data2ThriftStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new Data2ThriftTupleSchemeFactory();

  public double number1; // required
  public double number2; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String string1; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String string2; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String string3; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String string4; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String string5; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String string6; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String string7; // required
  public @org.apache.thrift.annotation.Nullable java.lang.String string8; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    NUMBER1((short)1, "number1"),
    NUMBER2((short)2, "number2"),
    STRING1((short)3, "string1"),
    STRING2((short)4, "string2"),
    STRING3((short)5, "string3"),
    STRING4((short)6, "string4"),
    STRING5((short)7, "string5"),
    STRING6((short)8, "string6"),
    STRING7((short)9, "string7"),
    STRING8((short)10, "string8");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // NUMBER1
          return NUMBER1;
        case 2: // NUMBER2
          return NUMBER2;
        case 3: // STRING1
          return STRING1;
        case 4: // STRING2
          return STRING2;
        case 5: // STRING3
          return STRING3;
        case 6: // STRING4
          return STRING4;
        case 7: // STRING5
          return STRING5;
        case 8: // STRING6
          return STRING6;
        case 9: // STRING7
          return STRING7;
        case 10: // STRING8
          return STRING8;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    @org.apache.thrift.annotation.Nullable
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NUMBER1_ISSET_ID = 0;
  private static final int __NUMBER2_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.NUMBER1, new org.apache.thrift.meta_data.FieldMetaData("number1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.NUMBER2, new org.apache.thrift.meta_data.FieldMetaData("number2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STRING1, new org.apache.thrift.meta_data.FieldMetaData("string1", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STRING2, new org.apache.thrift.meta_data.FieldMetaData("string2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STRING3, new org.apache.thrift.meta_data.FieldMetaData("string3", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STRING4, new org.apache.thrift.meta_data.FieldMetaData("string4", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STRING5, new org.apache.thrift.meta_data.FieldMetaData("string5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STRING6, new org.apache.thrift.meta_data.FieldMetaData("string6", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STRING7, new org.apache.thrift.meta_data.FieldMetaData("string7", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STRING8, new org.apache.thrift.meta_data.FieldMetaData("string8", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Data2Thrift.class, metaDataMap);
  }

  public Data2Thrift() {
  }

  public Data2Thrift(
    double number1,
    double number2,
    java.lang.String string1,
    java.lang.String string2,
    java.lang.String string3,
    java.lang.String string4,
    java.lang.String string5,
    java.lang.String string6,
    java.lang.String string7,
    java.lang.String string8)
  {
    this();
    this.number1 = number1;
    setNumber1IsSet(true);
    this.number2 = number2;
    setNumber2IsSet(true);
    this.string1 = string1;
    this.string2 = string2;
    this.string3 = string3;
    this.string4 = string4;
    this.string5 = string5;
    this.string6 = string6;
    this.string7 = string7;
    this.string8 = string8;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Data2Thrift(Data2Thrift other) {
    __isset_bitfield = other.__isset_bitfield;
    this.number1 = other.number1;
    this.number2 = other.number2;
    if (other.isSetString1()) {
      this.string1 = other.string1;
    }
    if (other.isSetString2()) {
      this.string2 = other.string2;
    }
    if (other.isSetString3()) {
      this.string3 = other.string3;
    }
    if (other.isSetString4()) {
      this.string4 = other.string4;
    }
    if (other.isSetString5()) {
      this.string5 = other.string5;
    }
    if (other.isSetString6()) {
      this.string6 = other.string6;
    }
    if (other.isSetString7()) {
      this.string7 = other.string7;
    }
    if (other.isSetString8()) {
      this.string8 = other.string8;
    }
  }

  public Data2Thrift deepCopy() {
    return new Data2Thrift(this);
  }

  @Override
  public void clear() {
    setNumber1IsSet(false);
    this.number1 = 0.0;
    setNumber2IsSet(false);
    this.number2 = 0.0;
    this.string1 = null;
    this.string2 = null;
    this.string3 = null;
    this.string4 = null;
    this.string5 = null;
    this.string6 = null;
    this.string7 = null;
    this.string8 = null;
  }

  public double getNumber1() {
    return this.number1;
  }

  public Data2Thrift setNumber1(double number1) {
    this.number1 = number1;
    setNumber1IsSet(true);
    return this;
  }

  public void unsetNumber1() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBER1_ISSET_ID);
  }

  /** Returns true if field number1 is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber1() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBER1_ISSET_ID);
  }

  public void setNumber1IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBER1_ISSET_ID, value);
  }

  public double getNumber2() {
    return this.number2;
  }

  public Data2Thrift setNumber2(double number2) {
    this.number2 = number2;
    setNumber2IsSet(true);
    return this;
  }

  public void unsetNumber2() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBER2_ISSET_ID);
  }

  /** Returns true if field number2 is set (has been assigned a value) and false otherwise */
  public boolean isSetNumber2() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBER2_ISSET_ID);
  }

  public void setNumber2IsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBER2_ISSET_ID, value);
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getString1() {
    return this.string1;
  }

  public Data2Thrift setString1(@org.apache.thrift.annotation.Nullable java.lang.String string1) {
    this.string1 = string1;
    return this;
  }

  public void unsetString1() {
    this.string1 = null;
  }

  /** Returns true if field string1 is set (has been assigned a value) and false otherwise */
  public boolean isSetString1() {
    return this.string1 != null;
  }

  public void setString1IsSet(boolean value) {
    if (!value) {
      this.string1 = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getString2() {
    return this.string2;
  }

  public Data2Thrift setString2(@org.apache.thrift.annotation.Nullable java.lang.String string2) {
    this.string2 = string2;
    return this;
  }

  public void unsetString2() {
    this.string2 = null;
  }

  /** Returns true if field string2 is set (has been assigned a value) and false otherwise */
  public boolean isSetString2() {
    return this.string2 != null;
  }

  public void setString2IsSet(boolean value) {
    if (!value) {
      this.string2 = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getString3() {
    return this.string3;
  }

  public Data2Thrift setString3(@org.apache.thrift.annotation.Nullable java.lang.String string3) {
    this.string3 = string3;
    return this;
  }

  public void unsetString3() {
    this.string3 = null;
  }

  /** Returns true if field string3 is set (has been assigned a value) and false otherwise */
  public boolean isSetString3() {
    return this.string3 != null;
  }

  public void setString3IsSet(boolean value) {
    if (!value) {
      this.string3 = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getString4() {
    return this.string4;
  }

  public Data2Thrift setString4(@org.apache.thrift.annotation.Nullable java.lang.String string4) {
    this.string4 = string4;
    return this;
  }

  public void unsetString4() {
    this.string4 = null;
  }

  /** Returns true if field string4 is set (has been assigned a value) and false otherwise */
  public boolean isSetString4() {
    return this.string4 != null;
  }

  public void setString4IsSet(boolean value) {
    if (!value) {
      this.string4 = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getString5() {
    return this.string5;
  }

  public Data2Thrift setString5(@org.apache.thrift.annotation.Nullable java.lang.String string5) {
    this.string5 = string5;
    return this;
  }

  public void unsetString5() {
    this.string5 = null;
  }

  /** Returns true if field string5 is set (has been assigned a value) and false otherwise */
  public boolean isSetString5() {
    return this.string5 != null;
  }

  public void setString5IsSet(boolean value) {
    if (!value) {
      this.string5 = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getString6() {
    return this.string6;
  }

  public Data2Thrift setString6(@org.apache.thrift.annotation.Nullable java.lang.String string6) {
    this.string6 = string6;
    return this;
  }

  public void unsetString6() {
    this.string6 = null;
  }

  /** Returns true if field string6 is set (has been assigned a value) and false otherwise */
  public boolean isSetString6() {
    return this.string6 != null;
  }

  public void setString6IsSet(boolean value) {
    if (!value) {
      this.string6 = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getString7() {
    return this.string7;
  }

  public Data2Thrift setString7(@org.apache.thrift.annotation.Nullable java.lang.String string7) {
    this.string7 = string7;
    return this;
  }

  public void unsetString7() {
    this.string7 = null;
  }

  /** Returns true if field string7 is set (has been assigned a value) and false otherwise */
  public boolean isSetString7() {
    return this.string7 != null;
  }

  public void setString7IsSet(boolean value) {
    if (!value) {
      this.string7 = null;
    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.String getString8() {
    return this.string8;
  }

  public Data2Thrift setString8(@org.apache.thrift.annotation.Nullable java.lang.String string8) {
    this.string8 = string8;
    return this;
  }

  public void unsetString8() {
    this.string8 = null;
  }

  /** Returns true if field string8 is set (has been assigned a value) and false otherwise */
  public boolean isSetString8() {
    return this.string8 != null;
  }

  public void setString8IsSet(boolean value) {
    if (!value) {
      this.string8 = null;
    }
  }

  public void setFieldValue(_Fields field, @org.apache.thrift.annotation.Nullable java.lang.Object value) {
    switch (field) {
    case NUMBER1:
      if (value == null) {
        unsetNumber1();
      } else {
        setNumber1((java.lang.Double)value);
      }
      break;

    case NUMBER2:
      if (value == null) {
        unsetNumber2();
      } else {
        setNumber2((java.lang.Double)value);
      }
      break;

    case STRING1:
      if (value == null) {
        unsetString1();
      } else {
        setString1((java.lang.String)value);
      }
      break;

    case STRING2:
      if (value == null) {
        unsetString2();
      } else {
        setString2((java.lang.String)value);
      }
      break;

    case STRING3:
      if (value == null) {
        unsetString3();
      } else {
        setString3((java.lang.String)value);
      }
      break;

    case STRING4:
      if (value == null) {
        unsetString4();
      } else {
        setString4((java.lang.String)value);
      }
      break;

    case STRING5:
      if (value == null) {
        unsetString5();
      } else {
        setString5((java.lang.String)value);
      }
      break;

    case STRING6:
      if (value == null) {
        unsetString6();
      } else {
        setString6((java.lang.String)value);
      }
      break;

    case STRING7:
      if (value == null) {
        unsetString7();
      } else {
        setString7((java.lang.String)value);
      }
      break;

    case STRING8:
      if (value == null) {
        unsetString8();
      } else {
        setString8((java.lang.String)value);
      }
      break;

    }
  }

  @org.apache.thrift.annotation.Nullable
  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case NUMBER1:
      return getNumber1();

    case NUMBER2:
      return getNumber2();

    case STRING1:
      return getString1();

    case STRING2:
      return getString2();

    case STRING3:
      return getString3();

    case STRING4:
      return getString4();

    case STRING5:
      return getString5();

    case STRING6:
      return getString6();

    case STRING7:
      return getString7();

    case STRING8:
      return getString8();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case NUMBER1:
      return isSetNumber1();
    case NUMBER2:
      return isSetNumber2();
    case STRING1:
      return isSetString1();
    case STRING2:
      return isSetString2();
    case STRING3:
      return isSetString3();
    case STRING4:
      return isSetString4();
    case STRING5:
      return isSetString5();
    case STRING6:
      return isSetString6();
    case STRING7:
      return isSetString7();
    case STRING8:
      return isSetString8();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that instanceof Data2Thrift)
      return this.equals((Data2Thrift)that);
    return false;
  }

  public boolean equals(Data2Thrift that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_number1 = true;
    boolean that_present_number1 = true;
    if (this_present_number1 || that_present_number1) {
      if (!(this_present_number1 && that_present_number1))
        return false;
      if (this.number1 != that.number1)
        return false;
    }

    boolean this_present_number2 = true;
    boolean that_present_number2 = true;
    if (this_present_number2 || that_present_number2) {
      if (!(this_present_number2 && that_present_number2))
        return false;
      if (this.number2 != that.number2)
        return false;
    }

    boolean this_present_string1 = true && this.isSetString1();
    boolean that_present_string1 = true && that.isSetString1();
    if (this_present_string1 || that_present_string1) {
      if (!(this_present_string1 && that_present_string1))
        return false;
      if (!this.string1.equals(that.string1))
        return false;
    }

    boolean this_present_string2 = true && this.isSetString2();
    boolean that_present_string2 = true && that.isSetString2();
    if (this_present_string2 || that_present_string2) {
      if (!(this_present_string2 && that_present_string2))
        return false;
      if (!this.string2.equals(that.string2))
        return false;
    }

    boolean this_present_string3 = true && this.isSetString3();
    boolean that_present_string3 = true && that.isSetString3();
    if (this_present_string3 || that_present_string3) {
      if (!(this_present_string3 && that_present_string3))
        return false;
      if (!this.string3.equals(that.string3))
        return false;
    }

    boolean this_present_string4 = true && this.isSetString4();
    boolean that_present_string4 = true && that.isSetString4();
    if (this_present_string4 || that_present_string4) {
      if (!(this_present_string4 && that_present_string4))
        return false;
      if (!this.string4.equals(that.string4))
        return false;
    }

    boolean this_present_string5 = true && this.isSetString5();
    boolean that_present_string5 = true && that.isSetString5();
    if (this_present_string5 || that_present_string5) {
      if (!(this_present_string5 && that_present_string5))
        return false;
      if (!this.string5.equals(that.string5))
        return false;
    }

    boolean this_present_string6 = true && this.isSetString6();
    boolean that_present_string6 = true && that.isSetString6();
    if (this_present_string6 || that_present_string6) {
      if (!(this_present_string6 && that_present_string6))
        return false;
      if (!this.string6.equals(that.string6))
        return false;
    }

    boolean this_present_string7 = true && this.isSetString7();
    boolean that_present_string7 = true && that.isSetString7();
    if (this_present_string7 || that_present_string7) {
      if (!(this_present_string7 && that_present_string7))
        return false;
      if (!this.string7.equals(that.string7))
        return false;
    }

    boolean this_present_string8 = true && this.isSetString8();
    boolean that_present_string8 = true && that.isSetString8();
    if (this_present_string8 || that_present_string8) {
      if (!(this_present_string8 && that_present_string8))
        return false;
      if (!this.string8.equals(that.string8))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(number1);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(number2);

    hashCode = hashCode * 8191 + ((isSetString1()) ? 131071 : 524287);
    if (isSetString1())
      hashCode = hashCode * 8191 + string1.hashCode();

    hashCode = hashCode * 8191 + ((isSetString2()) ? 131071 : 524287);
    if (isSetString2())
      hashCode = hashCode * 8191 + string2.hashCode();

    hashCode = hashCode * 8191 + ((isSetString3()) ? 131071 : 524287);
    if (isSetString3())
      hashCode = hashCode * 8191 + string3.hashCode();

    hashCode = hashCode * 8191 + ((isSetString4()) ? 131071 : 524287);
    if (isSetString4())
      hashCode = hashCode * 8191 + string4.hashCode();

    hashCode = hashCode * 8191 + ((isSetString5()) ? 131071 : 524287);
    if (isSetString5())
      hashCode = hashCode * 8191 + string5.hashCode();

    hashCode = hashCode * 8191 + ((isSetString6()) ? 131071 : 524287);
    if (isSetString6())
      hashCode = hashCode * 8191 + string6.hashCode();

    hashCode = hashCode * 8191 + ((isSetString7()) ? 131071 : 524287);
    if (isSetString7())
      hashCode = hashCode * 8191 + string7.hashCode();

    hashCode = hashCode * 8191 + ((isSetString8()) ? 131071 : 524287);
    if (isSetString8())
      hashCode = hashCode * 8191 + string8.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(Data2Thrift other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.compare(isSetNumber1(), other.isSetNumber1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number1, other.number1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetNumber2(), other.isSetNumber2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumber2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.number2, other.number2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetString1(), other.isSetString1());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetString1()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.string1, other.string1);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetString2(), other.isSetString2());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetString2()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.string2, other.string2);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetString3(), other.isSetString3());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetString3()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.string3, other.string3);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetString4(), other.isSetString4());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetString4()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.string4, other.string4);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetString5(), other.isSetString5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetString5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.string5, other.string5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetString6(), other.isSetString6());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetString6()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.string6, other.string6);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetString7(), other.isSetString7());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetString7()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.string7, other.string7);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.compare(isSetString8(), other.isSetString8());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetString8()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.string8, other.string8);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  @org.apache.thrift.annotation.Nullable
  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("Data2Thrift(");
    boolean first = true;

    sb.append("number1:");
    sb.append(this.number1);
    first = false;
    if (!first) sb.append(", ");
    sb.append("number2:");
    sb.append(this.number2);
    first = false;
    if (!first) sb.append(", ");
    sb.append("string1:");
    if (this.string1 == null) {
      sb.append("null");
    } else {
      sb.append(this.string1);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("string2:");
    if (this.string2 == null) {
      sb.append("null");
    } else {
      sb.append(this.string2);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("string3:");
    if (this.string3 == null) {
      sb.append("null");
    } else {
      sb.append(this.string3);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("string4:");
    if (this.string4 == null) {
      sb.append("null");
    } else {
      sb.append(this.string4);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("string5:");
    if (this.string5 == null) {
      sb.append("null");
    } else {
      sb.append(this.string5);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("string6:");
    if (this.string6 == null) {
      sb.append("null");
    } else {
      sb.append(this.string6);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("string7:");
    if (this.string7 == null) {
      sb.append("null");
    } else {
      sb.append(this.string7);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("string8:");
    if (this.string8 == null) {
      sb.append("null");
    } else {
      sb.append(this.string8);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class Data2ThriftStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public Data2ThriftStandardScheme getScheme() {
      return new Data2ThriftStandardScheme();
    }
  }

  private static class Data2ThriftStandardScheme extends org.apache.thrift.scheme.StandardScheme<Data2Thrift> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Data2Thrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // NUMBER1
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.number1 = iprot.readDouble();
              struct.setNumber1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NUMBER2
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.number2 = iprot.readDouble();
              struct.setNumber2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STRING1
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.string1 = iprot.readString();
              struct.setString1IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STRING2
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.string2 = iprot.readString();
              struct.setString2IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // STRING3
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.string3 = iprot.readString();
              struct.setString3IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STRING4
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.string4 = iprot.readString();
              struct.setString4IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STRING5
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.string5 = iprot.readString();
              struct.setString5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STRING6
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.string6 = iprot.readString();
              struct.setString6IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // STRING7
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.string7 = iprot.readString();
              struct.setString7IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STRING8
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.string8 = iprot.readString();
              struct.setString8IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Data2Thrift struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(NUMBER1_FIELD_DESC);
      oprot.writeDouble(struct.number1);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER2_FIELD_DESC);
      oprot.writeDouble(struct.number2);
      oprot.writeFieldEnd();
      if (struct.string1 != null) {
        oprot.writeFieldBegin(STRING1_FIELD_DESC);
        oprot.writeString(struct.string1);
        oprot.writeFieldEnd();
      }
      if (struct.string2 != null) {
        oprot.writeFieldBegin(STRING2_FIELD_DESC);
        oprot.writeString(struct.string2);
        oprot.writeFieldEnd();
      }
      if (struct.string3 != null) {
        oprot.writeFieldBegin(STRING3_FIELD_DESC);
        oprot.writeString(struct.string3);
        oprot.writeFieldEnd();
      }
      if (struct.string4 != null) {
        oprot.writeFieldBegin(STRING4_FIELD_DESC);
        oprot.writeString(struct.string4);
        oprot.writeFieldEnd();
      }
      if (struct.string5 != null) {
        oprot.writeFieldBegin(STRING5_FIELD_DESC);
        oprot.writeString(struct.string5);
        oprot.writeFieldEnd();
      }
      if (struct.string6 != null) {
        oprot.writeFieldBegin(STRING6_FIELD_DESC);
        oprot.writeString(struct.string6);
        oprot.writeFieldEnd();
      }
      if (struct.string7 != null) {
        oprot.writeFieldBegin(STRING7_FIELD_DESC);
        oprot.writeString(struct.string7);
        oprot.writeFieldEnd();
      }
      if (struct.string8 != null) {
        oprot.writeFieldBegin(STRING8_FIELD_DESC);
        oprot.writeString(struct.string8);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class Data2ThriftTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public Data2ThriftTupleScheme getScheme() {
      return new Data2ThriftTupleScheme();
    }
  }

  private static class Data2ThriftTupleScheme extends org.apache.thrift.scheme.TupleScheme<Data2Thrift> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Data2Thrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetNumber1()) {
        optionals.set(0);
      }
      if (struct.isSetNumber2()) {
        optionals.set(1);
      }
      if (struct.isSetString1()) {
        optionals.set(2);
      }
      if (struct.isSetString2()) {
        optionals.set(3);
      }
      if (struct.isSetString3()) {
        optionals.set(4);
      }
      if (struct.isSetString4()) {
        optionals.set(5);
      }
      if (struct.isSetString5()) {
        optionals.set(6);
      }
      if (struct.isSetString6()) {
        optionals.set(7);
      }
      if (struct.isSetString7()) {
        optionals.set(8);
      }
      if (struct.isSetString8()) {
        optionals.set(9);
      }
      oprot.writeBitSet(optionals, 10);
      if (struct.isSetNumber1()) {
        oprot.writeDouble(struct.number1);
      }
      if (struct.isSetNumber2()) {
        oprot.writeDouble(struct.number2);
      }
      if (struct.isSetString1()) {
        oprot.writeString(struct.string1);
      }
      if (struct.isSetString2()) {
        oprot.writeString(struct.string2);
      }
      if (struct.isSetString3()) {
        oprot.writeString(struct.string3);
      }
      if (struct.isSetString4()) {
        oprot.writeString(struct.string4);
      }
      if (struct.isSetString5()) {
        oprot.writeString(struct.string5);
      }
      if (struct.isSetString6()) {
        oprot.writeString(struct.string6);
      }
      if (struct.isSetString7()) {
        oprot.writeString(struct.string7);
      }
      if (struct.isSetString8()) {
        oprot.writeString(struct.string8);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Data2Thrift struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(10);
      if (incoming.get(0)) {
        struct.number1 = iprot.readDouble();
        struct.setNumber1IsSet(true);
      }
      if (incoming.get(1)) {
        struct.number2 = iprot.readDouble();
        struct.setNumber2IsSet(true);
      }
      if (incoming.get(2)) {
        struct.string1 = iprot.readString();
        struct.setString1IsSet(true);
      }
      if (incoming.get(3)) {
        struct.string2 = iprot.readString();
        struct.setString2IsSet(true);
      }
      if (incoming.get(4)) {
        struct.string3 = iprot.readString();
        struct.setString3IsSet(true);
      }
      if (incoming.get(5)) {
        struct.string4 = iprot.readString();
        struct.setString4IsSet(true);
      }
      if (incoming.get(6)) {
        struct.string5 = iprot.readString();
        struct.setString5IsSet(true);
      }
      if (incoming.get(7)) {
        struct.string6 = iprot.readString();
        struct.setString6IsSet(true);
      }
      if (incoming.get(8)) {
        struct.string7 = iprot.readString();
        struct.setString7IsSet(true);
      }
      if (incoming.get(9)) {
        struct.string8 = iprot.readString();
        struct.setString8IsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

