// automatically generated by the FlatBuffers compiler, do not modify

package testing.flatbuffers;

import com.google.flatbuffers.BaseVector;
import com.google.flatbuffers.Constants;
import com.google.flatbuffers.FlatBufferBuilder;
import com.google.flatbuffers.Table;

import java.nio.ByteBuffer;
import java.nio.ByteOrder;

@SuppressWarnings("unused")
public final class PersonFlat extends Table {
    public static void ValidateVersion() {
        Constants.FLATBUFFERS_2_0_0();
    }

    public static PersonFlat getRootAsPersonFlat(ByteBuffer _bb) {
        return getRootAsPersonFlat(_bb, new PersonFlat());
    }

    public static PersonFlat getRootAsPersonFlat(ByteBuffer _bb, PersonFlat obj) {
        _bb.order(ByteOrder.LITTLE_ENDIAN);
        return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb));
    }

    public void __init(int _i, ByteBuffer _bb) {
        __reset(_i, _bb);
    }

    public PersonFlat __assign(int _i, ByteBuffer _bb) {
        __init(_i, _bb);
        return this;
    }

    public String name() {
        int o = __offset(4);
        return o != 0 ? __string(o + bb_pos) : null;
    }

    public ByteBuffer nameAsByteBuffer() {
        return __vector_as_bytebuffer(4, 1);
    }

    public ByteBuffer nameInByteBuffer(ByteBuffer _bb) {
        return __vector_in_bytebuffer(_bb, 4, 1);
    }

    public int id() {
        int o = __offset(6);
        return o != 0 ? bb.getInt(o + bb_pos) : 0;
    }

    public String email() {
        int o = __offset(8);
        return o != 0 ? __string(o + bb_pos) : null;
    }

    public ByteBuffer emailAsByteBuffer() {
        return __vector_as_bytebuffer(8, 1);
    }

    public ByteBuffer emailInByteBuffer(ByteBuffer _bb) {
        return __vector_in_bytebuffer(_bb, 8, 1);
    }

    public PhoneNumberFlat phones(int j) {
        return phones(new PhoneNumberFlat(), j);
    }

    public PhoneNumberFlat phones(PhoneNumberFlat obj, int j) {
        int o = __offset(10);
        return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null;
    }

    public int phonesLength() {
        int o = __offset(10);
        return o != 0 ? __vector_len(o) : 0;
    }

    public PhoneNumberFlat.Vector phonesVector() {
        return phonesVector(new PhoneNumberFlat.Vector());
    }

    public PhoneNumberFlat.Vector phonesVector(PhoneNumberFlat.Vector obj) {
        int o = __offset(10);
        return o != 0 ? obj.__assign(__vector(o), 4, bb) : null;
    }

    public static int createPersonFlat(FlatBufferBuilder builder,
                                       int nameOffset,
                                       int id,
                                       int emailOffset,
                                       int phonesOffset) {
        builder.startTable(4);
        PersonFlat.addPhones(builder, phonesOffset);
        PersonFlat.addEmail(builder, emailOffset);
        PersonFlat.addId(builder, id);
        PersonFlat.addName(builder, nameOffset);
        return PersonFlat.endPersonFlat(builder);
    }

    public static void startPersonFlat(FlatBufferBuilder builder) {
        builder.startTable(4);
    }

    public static void addName(FlatBufferBuilder builder, int nameOffset) {
        builder.addOffset(0, nameOffset, 0);
    }

    public static void addId(FlatBufferBuilder builder, int id) {
        builder.addInt(1, id, 0);
    }

    public static void addEmail(FlatBufferBuilder builder, int emailOffset) {
        builder.addOffset(2, emailOffset, 0);
    }

    public static void addPhones(FlatBufferBuilder builder, int phonesOffset) {
        builder.addOffset(3, phonesOffset, 0);
    }

    public static int createPhonesVector(FlatBufferBuilder builder, int[] data) {
        builder.startVector(4, data.length, 4);
        for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]);
        return builder.endVector();
    }

    public static void startPhonesVector(FlatBufferBuilder builder, int numElems) {
        builder.startVector(4, numElems, 4);
    }

    public static int endPersonFlat(FlatBufferBuilder builder) {
        int o = builder.endTable();
        return o;
    }

    public static final class Vector extends BaseVector {
        public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) {
            __reset(_vector, _element_size, _bb);
            return this;
        }

        public PersonFlat get(int j) {
            return get(new PersonFlat(), j);
        }

        public PersonFlat get(PersonFlat obj, int j) {
            return obj.__assign(__indirect(__element(j), bb), bb);
        }
    }
}

